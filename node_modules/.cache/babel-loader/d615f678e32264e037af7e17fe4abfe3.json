{"ast":null,"code":"var _jsxFileName = \"/Users/mejrimasmajilbasic/Documents/BachelorProject/my-app/expression-tutor-parse-tutorial/src/components/cardsContainer.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Container from '@material-ui/core/Container';\nimport MyCard from './myCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction CardsContainer({\n  selected,\n  cardsText\n}) {\n  _s();\n\n  const [array, setArray] = useState(cardsText);\n  const [currentlySelected, setN] = useState(selected);\n  let h = false;\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"sm\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Card \", currentlySelected, \" selected!\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 13\n    }, this), array.map((e, i) => {\n      if (currentlySelected === i + 1) {\n        h = true;\n      } else {\n        h = false;\n      }\n\n      return /*#__PURE__*/_jsxDEV(MyCard, {\n        value: e,\n        highlight: h,\n        handleClick: setN,\n        index: i\n      }, e, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 24\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 9\n  }, this);\n}\n\n_s(CardsContainer, \"BOv+1MXd3eeiV6wHI9k97NIoilo=\");\n\n_c = CardsContainer;\nCardsContainer.propTypes = {\n  selected: PropTypes.number,\n  cardsText: PropTypes.arrayOf(PropTypes.string)\n};\nCardsContainer.defaultProps = {\n  selected: false,\n  cardsText: []\n};\nexport default CardsContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"CardsContainer\");","map":{"version":3,"sources":["/Users/mejrimasmajilbasic/Documents/BachelorProject/my-app/expression-tutor-parse-tutorial/src/components/cardsContainer.js"],"names":["React","Component","useState","PropTypes","Container","MyCard","CardsContainer","selected","cardsText","array","setArray","currentlySelected","setN","h","map","e","i","propTypes","number","arrayOf","string","defaultProps"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAA0C,OAA1C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,MAAP,MAAmB,UAAnB;;;AAGA,SAASC,cAAT,CAAwB;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAxB,EAAiD;AAAA;;AAC7C,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAACM,SAAD,CAAlC;AACA,QAAM,CAACG,iBAAD,EAAoBC,IAApB,IAA4BV,QAAQ,CAACK,QAAD,CAA1C;AACA,MAAIM,CAAC,GAAG,KAAR;AACA,sBACI,QAAC,SAAD;AAAW,IAAA,QAAQ,EAAC,IAApB;AAAA,4BACI;AAAA,0BAAUF,iBAAV;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,EAEMF,KAAK,CAACK,GAAN,CAAU,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAClB,UAAIL,iBAAiB,KAAKK,CAAC,GAAC,CAA5B,EAA8B;AAC1BH,QAAAA,CAAC,GAAG,IAAJ;AACH,OAFD,MAEO;AACHA,QAAAA,CAAC,GAAG,KAAJ;AACH;;AACD,0BAAO,QAAC,MAAD;AAEH,QAAA,KAAK,EAAEE,CAFJ;AAGH,QAAA,SAAS,EAAEF,CAHR;AAIH,QAAA,WAAW,EAAED,IAJV;AAKH,QAAA,KAAK,EAAEI;AALJ,SACED,CADF;AAAA;AAAA;AAAA;AAAA,cAAP;AAOH,KAbC,CAFN;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAmBH;;GAvBQT,c;;KAAAA,c;AAyBTA,cAAc,CAACW,SAAf,GAA2B;AACvBV,EAAAA,QAAQ,EAAEJ,SAAS,CAACe,MADG;AAEvBV,EAAAA,SAAS,EAAEL,SAAS,CAACgB,OAAV,CAAkBhB,SAAS,CAACiB,MAA5B;AAFY,CAA3B;AAKAd,cAAc,CAACe,YAAf,GAA8B;AAC1Bd,EAAAA,QAAQ,EAAE,KADgB;AAE1BC,EAAAA,SAAS,EAAE;AAFe,CAA9B;AAKA,eAAeF,cAAf","sourcesContent":["import React, {Component, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Container from '@material-ui/core/Container';\nimport MyCard from './myCard';\n\n\nfunction CardsContainer({ selected, cardsText }) {\n    const [array, setArray] = useState(cardsText)\n    const [currentlySelected, setN] = useState(selected)\n    let h = false\n    return (\n        <Container maxWidth=\"sm\">\n            <h1>Card {currentlySelected} selected!</h1>\n            { array.map((e, i) => {\n                if (currentlySelected === i+1){\n                    h = true\n                } else {\n                    h = false\n                }\n                return <MyCard \n                    key={e}\n                    value={e} \n                    highlight={h}\n                    handleClick={setN}\n                    index={i}\n                />\n            })}\n        </Container>\n        );\n}\n\nCardsContainer.propTypes = {\n    selected: PropTypes.number,\n    cardsText: PropTypes.arrayOf(PropTypes.string),\n};\n\nCardsContainer.defaultProps = {\n    selected: false,\n    cardsText: [],\n};\n\nexport default CardsContainer;"]},"metadata":{},"sourceType":"module"}